/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.actinverflights;

import com.opencsv.CSVWriter;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Thread.sleep;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.TransferHandler;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

/**
 *
 * @author mrchu
 */
public class MasiveSearch extends javax.swing.JPanel {

    public String rutaDriver = "";
    public String rutaInput = "";
    public String savPath = "";
    public int idNavegador = 0;

    public String getRutaDriver() {
        return rutaDriver;
    }

    public void setRutaDriver(String rutaDriver) {
        this.rutaDriver = rutaDriver;
    }

    public String getSavPath() {
        return savPath;
    }

    public void setSavPath(String savPath) {
        this.savPath = savPath;
    }

    public int getIdNavegador() {
        return idNavegador;
    }

    public void setIdNavegador(int idNavegador) {
        this.idNavegador = idNavegador;
    }

    /**
     * Creates new form MasiveSearch
     */
    public MasiveSearch() {
        initComponents();
        modifyLabel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        inputName = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        DragNdrop = new javax.swing.JLabel();

        jButton4.setText("Examinar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Selecciona o arrastra un archivo para la búsqueda");

        inputName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        inputName.setEnabled(false);
        inputName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNameActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        jLabel2.setText("Elige una ruta para guardar los datos de la búsqueda");
        jLabel2.setToolTipText("");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jButton1.setText("Examinar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField1.setEnabled(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton2.setText("DESCARGAR DATOS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(77, 77, 77))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextField1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(26, Short.MAX_VALUE))
        );

        DragNdrop.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(107, 107, 107))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 24, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DragNdrop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DragNdrop, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ChooseBrowser.class.getName()).log(Level.SEVERE, null, ex);
        }
        JFileChooser file = new JFileChooser();
        file.showOpenDialog(this);
        File archivo = file.getSelectedFile();
        rutaInput = archivo.getAbsolutePath();
        inputName.setText(rutaInput);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void inputNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputNameActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MasiveSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
        JFileChooser file = new JFileChooser();
        file.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        file.showOpenDialog(this);
        File archivo = file.getSelectedFile();
        this.savPath = archivo.getAbsolutePath();
        jTextField1.setText(this.savPath);
        System.out.println();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            keepData();
        } catch (IOException | InterruptedException | ParseException ex) {
            Logger.getLogger(MasiveSearch.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel DragNdrop;
    private javax.swing.JTextField inputName;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
public void modifyLabel() {
        TransferHandler th = new TransferHandler() {

            @Override
            public boolean canImport(JComponent comp, DataFlavor[] transferFlavors) {
                return true;
            }

            @Override
            public boolean importData(JComponent comp, Transferable t) {

                try {
                    List<File> file = (List<File>) t.getTransferData(DataFlavor.javaFileListFlavor);
                    String ruta = file.get(0).getAbsolutePath();
                    rutaInput = ruta;
                    inputName.setText(ruta);

                } catch (UnsupportedFlavorException | IOException ex) {
                    Logger.getLogger(MasiveSearch.class.getName()).log(Level.SEVERE, null, ex);
                }
                return false;
            }

        };
        DragNdrop.setTransferHandler(th);
    }

    public void keepData() throws IOException, InterruptedException, ParseException {
        List<String[]> vuelosInfo = new ArrayList<>();

        //Leemos la informacion del csv
        List<String[]> csv = new ArrayList<>();
        BufferedReader archivo = new BufferedReader(new FileReader(this.rutaInput));

        String line = archivo.readLine(); //Saltamos los encabezados en la lectura del archivo csv 
        line = archivo.readLine();
        while (line != null) {
            System.out.println(line);
            String[] camposCsv = line.split(",");
            csv.add(camposCsv);
            line = archivo.readLine();
        }

        //AGREGAMOS LOS ENCABEZADOS
        String[] array = {"Fecha Consulta", "Fecha Vuelo", "Origen", "Destino", "Aerolinea", "Precio"};
        vuelosInfo.add(array);

        for (String[] registro : csv) {
            buscar(registro, vuelosInfo);
        }

        //GUARDAMOS LA INFORMACIÓN
        saveInfo(this.savPath, "ArchivoVuelosActinver", vuelosInfo);

    }

    public void buscar(String[] campos, List<String[]> vuelosInfo) throws IOException, InterruptedException, ParseException {
        WebDriver driver = null;
        ErrorWindow window = new ErrorWindow();
        window.getjLabel1().setText("<html><p>Parece que el driver no corresponde al navegador seleccionado o el navegador seleccionado no se encuentra instalado en el equipo</p></html>");
        System.out.println("Este es el navegador" + this.idNavegador);
        System.out.println("Esta es la ruta del navegador" + this.rutaDriver);
        try {
            if (rutaDriver.equals("")) {
                window.setVisible(true);
            } else {
                if (this.idNavegador == 1) {
                    System.setProperty("webdriver.edge.driver", rutaDriver);
                    driver = new EdgeDriver();
                }
                if (this.idNavegador == 2) {
                    System.setProperty("webdriver.gecko.driver", rutaDriver);
                    driver = new FirefoxDriver();

                }
                if (this.idNavegador == 3) {
                    System.setProperty("webdriver.chrome.driver", rutaDriver);
                    driver = new ChromeDriver();
                }
            }

        } catch (Exception e) {
            window.setVisible(true);
        }

        driver.get("https://www.google.com/travel/flights?tfs=CBwQARoaagwIAhIIL20vMDRzcWoSCjIwMjEtMDQtMjlwAYIBCwj___________8BQAFIAZgBAg&hl=es");
        sleep(3000);
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
        WebDriverWait wait = new WebDriverWait(driver, 30);

        //INGRESAMOS LA FECHA EN LA BUSQUEDA
        clickDate(driver, wait, campos[0]);

        //INYECTAMOS LA CLASE DEL VUELO Y EL NUMERO DE PASAJEROS
        clickDatos(driver, wait, campos[3], campos[4]);

        //DAMOS CLICK A LA CIUDAD DE ORIGEN Y LA CIUDAD DE DESTINO
        clickCities(driver, wait, campos[1], campos[2]);

        //DAMOS CLICK EN EL BOTON DE BUSCAR
        WebElement searchButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@jsname='vLv7Lb']")));
        searchButton.click();

        //DESCARGAMOS LOS DATOS DE LA BUSQUEDA
        //Damaos click en el boton de escalas y selecionamos sin escalas
        WebElement escalasButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@jsname='XPtOyb']")));
        escalasButton.click();
        WebElement listaEsclaas = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@jsname='IW6exe']")));

        List<WebElement> inputsEsclaas = listaEsclaas.findElements(By.xpath("//li[@class='Bblesf']"));

        WebElement sinEscalasdiv = inputsEsclaas.get(1)/*.findElement(By.xpath("//div[@class='VfPpkd-GCYh9b kDzhGf ZCYEwf wHsUjf']"))*/;
        //WebElement input = sinEscalasdiv.findElement(By.xpath("//input[@jsname='YPqjbf']"));
        sleep(1000);
        sinEscalasdiv.click();
        WebElement Xbutton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@jsname='plIjzf']")));
        Xbutton.click();
        sleep(1000);

        //Damos click en el boton de ordenar por costo
        WebElement divInfo = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='mi3osf NppLad']")));
        WebElement OrderByButton = divInfo.findElements(By.xpath("//button[@jsname='LgbsSe']")).get(3);
        OrderByButton.click();

        //
        WebElement listaDesplegable = divInfo.findElement(By.xpath("//ul[@class='Akxp3 Kpu42c Lxea9c']"));
        WebElement option = listaDesplegable.findElement(By.xpath("//li[text()='Precio']"));
        option.click();

        sleep(10000);

        //Obtenemos la información de cada vuelo
        WebElement divVuelos = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='VKb8lb H4aYKc']")));
        List<WebElement> vuelos = divVuelos.findElements(By.xpath("//div[@class='mz0jqb taHBqe Qpcsfe']"));
        WebElement vuelo;
        String vueleo;

        //Guardamos la info de cadad vuelo en un arreglo 
        //List<String[]> vuelosInfo = new ArrayList<>();
        int i = 0;
        String[] registro;

        vuelo = divVuelos.findElements(By.xpath("//div[@class='mz0jqb taHBqe Qpcsfe']")).get(0);
        vueleo = vuelo.getText();
        registro = vueleo.split("\n");
        do {
            String[] infoVuelo = new String[6];
            if (registro.length >= 9) {
                System.out.println("----------------" + i + "----------------");
                System.out.println(registro[5]);
                System.out.println(registro[6]);
                System.out.println(registro[3]);
                System.out.println(registro[8]);
                infoVuelo[0] = getDate("dd-MMM");
                infoVuelo[1] = campos[0];
                infoVuelo[2] = registro[5];//Origen
                infoVuelo[3] = registro[6].replace("–", "");//Destino
                infoVuelo[4] = registro[3];//Aerolinea
                infoVuelo[5] = registro[8].replace(" MXN", "");//Precio
                infoVuelo[5] = infoVuelo[5].replace(".", "");

                List<String[]> vueloos = new ArrayList<>();
                vueloos.add(infoVuelo);
                saveInfo(this.savPath, "ArchivoVuelosActinverParcial", vueloos);
                vuelosInfo.add(infoVuelo);
            }
            i++;
            if (i <= divVuelos.findElements(By.xpath("//div[@class='mz0jqb taHBqe Qpcsfe']")).size() - 1) {

                registro = null;
                vuelo = divVuelos.findElements(By.xpath("//div[@class='mz0jqb taHBqe Qpcsfe']")).get(i);
                vueleo = vuelo.getText();
                registro = vueleo.split("\n");
            }
        } while (registro.length >= 9 && i <= divVuelos.findElements(By.xpath("//div[@class='mz0jqb taHBqe Qpcsfe']")).size() - 1);

        //}
        driver.quit();

    }

    public void clickDate(WebDriver driver, WebDriverWait wait, String fecha) throws InterruptedException {

        sleep(1000);
        //BUSCAMOS LA CAJA QUE TIENE LOS INPUTS DE LA CIUDAD i6
        WebElement citiesBox = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@jsname='OEtP0']")));
        List<WebElement> inputs = citiesBox.findElements(By.xpath("//input[@jsname='yrriRe']"));

        WebElement date = inputs.get(4);
        JavascriptExecutor js = (JavascriptExecutor) driver;
        date.clear();

        date.click();
        js.executeScript("arguments[0].value='" + fecha + "';", date);

        WebElement panel = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='akjk5c FrVb0c']")));

        WebElement readyButton = panel.findElement(By.xpath("//button[@class='VfPpkd-LgbsSe VfPpkd-LgbsSe-OWXEXe-k8QpJ VfPpkd-LgbsSe-OWXEXe-dgl2Hf nCP5yc AjY5Oe DuMIQc z18xM']"));

        readyButton.click();

    }

    public void clickDatos(WebDriver driver, WebDriverWait wait, String clase, String pasajeros) {
        // SELECCIONAMOS LA CLASE
        WebElement claseButton = driver.findElements(By.xpath("//button[@class='VfPpkd-LgbsSe VfPpkd-LgbsSe-OWXEXe-INsAgc VfPpkd-LgbsSe-OWXEXe-Bz112c-UbuQg VfPpkd-LgbsSe-OWXEXe-dgl2Hf Rj2Mlf OLiIxf PDpWxe BobFtf']")).get(2);
        claseButton.click();

        WebElement claseOptions = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='A8nfpe yRXJAe iWO5td']")));
        WebElement claseOption = claseOptions.findElement(By.xpath("//li[text()='" + clase + "']"));
        claseOption.click();

        // SELECCIONAMOS EL NUMERO DE PASAJEROS
        //Damos click en el boton pasajeros
        WebElement pasajerosButton = driver.findElements(By.xpath("//button[@class='VfPpkd-LgbsSe VfPpkd-LgbsSe-OWXEXe-INsAgc VfPpkd-LgbsSe-OWXEXe-Bz112c-UbuQg VfPpkd-LgbsSe-OWXEXe-dgl2Hf Rj2Mlf OLiIxf PDpWxe BobFtf']")).get(1);
        pasajerosButton.click();

        //Damos click en el boton de adultos
        WebElement tabla = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//ul[@class='Xdzhob Lxea9c']")));
        WebElement numPasajerosMas = tabla.findElements(By.xpath("//button[@class='VfPpkd-LgbsSe VfPpkd-LgbsSe-OWXEXe-Bz112c-M1Soyc VfPpkd-LgbsSe-OWXEXe-dgl2Hf ksBjEc lKxP2d rGF6nb J5hQ8b']")).get(1);
        WebElement numPasajerosMenos = tabla.findElements(By.xpath("//button[@class='VfPpkd-LgbsSe VfPpkd-LgbsSe-OWXEXe-Bz112c-M1Soyc VfPpkd-LgbsSe-OWXEXe-dgl2Hf ksBjEc lKxP2d rGF6nb J5hQ8b']")).get(0);

        WebElement numPasajerosSpan = tabla.findElement(By.xpath("//span[@jsname='NnAfwf']"));

        //Verificamos si el numero de pasajeros ya es igual al numero de pasajeros que queremos
        if (!numPasajerosSpan.getText().equals(pasajeros)) {

            //Si es menor damos click en más hasta que sea igual
            while (Integer.parseInt(numPasajerosSpan.getText()) < Integer.parseInt(pasajeros)) {
                numPasajerosMas.click();
            }
            //Si es mayor damos clic en menos hasta que sea igual
            while (Integer.parseInt(numPasajerosSpan.getText()) > Integer.parseInt(pasajeros)) {
                numPasajerosMenos.click();
            }

        }

        //Damos click en listo
        WebElement listoButton = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//button[@class='VfPpkd-LgbsSe ksBjEc lKxP2d bRx3h']")));
        listoButton.click();
    }

    public void clickCities(WebDriver driver, WebDriverWait wait, String ciudadOrigen, String ciudadDestino) {
        //BUSCAMOS LA CAJA QUE TIENE LOS INPUTS DE LA CIUDAD i6
        WebElement citiesBox = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@jsname='OEtP0']")));
        List<WebElement> inputs = citiesBox.findElements(By.xpath("//input[@jsname='yrriRe']"));

        //INYECTAMOS LA CIUDAD DE ORIGEN 
        WebElement origen = inputs.get(0);
        JavascriptExecutor js = (JavascriptExecutor) driver;

        js.executeScript("arguments[0].value='" + ciudadOrigen + "';", origen);
        origen.click();
        //Obtenemos la lista deplegable
        //WebElement originListCities = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='A8nfpe yRXJAe P0ukfb a4gL0d TFC9me PRvvEd S7G7Bc Otspu iWO5td BDJ8fb']")));
        WebElement firstMatchO = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[@class='n4HaVc ']")));
        firstMatchO.click();

        //INYECTAMOS LA CIUDAD DE DESTINO    
        WebElement destino = inputs.get(2);
        js.executeScript("arguments[0].value='" + ciudadDestino + "';", destino);
        destino.click();
        
        //WebElement desListCities = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//div[@class='A8nfpe yRXJAe P0ukfb a4gL0d TFC9me PRvvEd S7G7Bc Otspu iWO5td BDJ8fb']")));
        WebElement firstMatchD = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[@class='n4HaVc ']")));
        firstMatchD.click();
    }

    public static void saveInfo(String ruta, String fileName, List<String[]> lista) throws IOException {
        String path = ruta + "\\" + fileName + ".csv";
        try (CSVWriter writer = new CSVWriter(new FileWriter(path, true))) {
            lista.forEach(registro -> {
                writer.writeNext(registro);
            });
        }
    }

    @SuppressWarnings("empty-statement")
    public static String getDate(String formato) throws ParseException {
        //Obtenemos la fecha de hoy
        DateFormat formatter = new SimpleDateFormat(formato);
        Date today = new Date();
        return formatter.format(today);
    }

}
